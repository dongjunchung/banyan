// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// logf_z_given_A
double logf_z_given_A(NumericVector zs, List A, NumericVector pis, NumericMatrix Ps);
RcppExport SEXP _mlsbm_logf_z_given_A(SEXP zsSEXP, SEXP ASEXP, SEXP pisSEXP, SEXP PsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type zs(zsSEXP);
    Rcpp::traits::input_parameter< List >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pis(pisSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Ps(PsSEXP);
    rcpp_result_gen = Rcpp::wrap(logf_z_given_A(zs, A, pis, Ps));
    return rcpp_result_gen;
END_RCPP
}
// logf_z_given_A_single
double logf_z_given_A_single(NumericVector zs, NumericMatrix A, NumericVector pis, NumericMatrix Ps);
RcppExport SEXP _mlsbm_logf_z_given_A_single(SEXP zsSEXP, SEXP ASEXP, SEXP pisSEXP, SEXP PsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type zs(zsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pis(pisSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Ps(PsSEXP);
    rcpp_result_gen = Rcpp::wrap(logf_z_given_A_single(zs, A, pis, Ps));
    return rcpp_result_gen;
END_RCPP
}
// rdirichlet_cpp
arma::mat rdirichlet_cpp(int num_samples, arma::vec alpha_m);
RcppExport SEXP _mlsbm_rdirichlet_cpp(SEXP num_samplesSEXP, SEXP alpha_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_samples(num_samplesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha_m(alpha_mSEXP);
    rcpp_result_gen = Rcpp::wrap(rdirichlet_cpp(num_samples, alpha_m));
    return rcpp_result_gen;
END_RCPP
}
// sample_SBM_fast
NumericVector sample_SBM_fast(NumericVector z, NumericMatrix P);
RcppExport SEXP _mlsbm_sample_SBM_fast(SEXP zSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_SBM_fast(z, P));
    return rcpp_result_gen;
END_RCPP
}
// POW
double POW(NumericMatrix Ps, double p);
RcppExport SEXP _mlsbm_POW(SEXP PsSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Ps(PsSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(POW(Ps, p));
    return rcpp_result_gen;
END_RCPP
}
// logPow
double logPow(NumericMatrix Ps, double p);
RcppExport SEXP _mlsbm_logPow(SEXP PsSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Ps(PsSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(logPow(Ps, p));
    return rcpp_result_gen;
END_RCPP
}
// isFinite
LogicalVector isFinite(NumericVector x);
RcppExport SEXP _mlsbm_isFinite(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(isFinite(x));
    return rcpp_result_gen;
END_RCPP
}
// fix_NAs
NumericVector fix_NAs(NumericVector x);
RcppExport SEXP _mlsbm_fix_NAs(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fix_NAs(x));
    return rcpp_result_gen;
END_RCPP
}
// is_any
LogicalVector is_any(NumericVector x, double c);
RcppExport SEXP _mlsbm_is_any(SEXP xSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(is_any(x, c));
    return rcpp_result_gen;
END_RCPP
}
// whichmax
double whichmax(NumericVector x);
RcppExport SEXP _mlsbm_whichmax(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(whichmax(x));
    return rcpp_result_gen;
END_RCPP
}
// fixpi
NumericVector fixpi(NumericVector pi_star);
RcppExport SEXP _mlsbm_fixpi(SEXP pi_starSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pi_star(pi_starSEXP);
    rcpp_result_gen = Rcpp::wrap(fixpi(pi_star));
    return rcpp_result_gen;
END_RCPP
}
// update_P
NumericMatrix update_P(List A, NumericVector zs, int K0, double b10, double b20);
RcppExport SEXP _mlsbm_update_P(SEXP ASEXP, SEXP zsSEXP, SEXP K0SEXP, SEXP b10SEXP, SEXP b20SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type zs(zsSEXP);
    Rcpp::traits::input_parameter< int >::type K0(K0SEXP);
    Rcpp::traits::input_parameter< double >::type b10(b10SEXP);
    Rcpp::traits::input_parameter< double >::type b20(b20SEXP);
    rcpp_result_gen = Rcpp::wrap(update_P(A, zs, K0, b10, b20));
    return rcpp_result_gen;
END_RCPP
}
// update_P_single
NumericMatrix update_P_single(NumericMatrix A, NumericVector zs, int K0, double b10, double b20);
RcppExport SEXP _mlsbm_update_P_single(SEXP ASEXP, SEXP zsSEXP, SEXP K0SEXP, SEXP b10SEXP, SEXP b20SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type zs(zsSEXP);
    Rcpp::traits::input_parameter< int >::type K0(K0SEXP);
    Rcpp::traits::input_parameter< double >::type b10(b10SEXP);
    Rcpp::traits::input_parameter< double >::type b20(b20SEXP);
    rcpp_result_gen = Rcpp::wrap(update_P_single(A, zs, K0, b10, b20));
    return rcpp_result_gen;
END_RCPP
}
// update_counts
NumericVector update_counts(NumericVector zs, int K0);
RcppExport SEXP _mlsbm_update_counts(SEXP zsSEXP, SEXP K0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type zs(zsSEXP);
    Rcpp::traits::input_parameter< int >::type K0(K0SEXP);
    rcpp_result_gen = Rcpp::wrap(update_counts(zs, K0));
    return rcpp_result_gen;
END_RCPP
}
// update_z
NumericVector update_z(NumericVector zs, List A, NumericMatrix Ps, NumericVector pis, NumericVector classes);
RcppExport SEXP _mlsbm_update_z(SEXP zsSEXP, SEXP ASEXP, SEXP PsSEXP, SEXP pisSEXP, SEXP classesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type zs(zsSEXP);
    Rcpp::traits::input_parameter< List >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Ps(PsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pis(pisSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type classes(classesSEXP);
    rcpp_result_gen = Rcpp::wrap(update_z(zs, A, Ps, pis, classes));
    return rcpp_result_gen;
END_RCPP
}
// update_z_single
NumericVector update_z_single(NumericVector zs, NumericMatrix A, NumericMatrix Ps, NumericVector pis, NumericVector classes);
RcppExport SEXP _mlsbm_update_z_single(SEXP zsSEXP, SEXP ASEXP, SEXP PsSEXP, SEXP pisSEXP, SEXP classesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type zs(zsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Ps(PsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pis(pisSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type classes(classesSEXP);
    rcpp_result_gen = Rcpp::wrap(update_z_single(zs, A, Ps, pis, classes));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mlsbm_logf_z_given_A", (DL_FUNC) &_mlsbm_logf_z_given_A, 4},
    {"_mlsbm_logf_z_given_A_single", (DL_FUNC) &_mlsbm_logf_z_given_A_single, 4},
    {"_mlsbm_rdirichlet_cpp", (DL_FUNC) &_mlsbm_rdirichlet_cpp, 2},
    {"_mlsbm_sample_SBM_fast", (DL_FUNC) &_mlsbm_sample_SBM_fast, 2},
    {"_mlsbm_POW", (DL_FUNC) &_mlsbm_POW, 2},
    {"_mlsbm_logPow", (DL_FUNC) &_mlsbm_logPow, 2},
    {"_mlsbm_isFinite", (DL_FUNC) &_mlsbm_isFinite, 1},
    {"_mlsbm_fix_NAs", (DL_FUNC) &_mlsbm_fix_NAs, 1},
    {"_mlsbm_is_any", (DL_FUNC) &_mlsbm_is_any, 2},
    {"_mlsbm_whichmax", (DL_FUNC) &_mlsbm_whichmax, 1},
    {"_mlsbm_fixpi", (DL_FUNC) &_mlsbm_fixpi, 1},
    {"_mlsbm_update_P", (DL_FUNC) &_mlsbm_update_P, 5},
    {"_mlsbm_update_P_single", (DL_FUNC) &_mlsbm_update_P_single, 5},
    {"_mlsbm_update_counts", (DL_FUNC) &_mlsbm_update_counts, 2},
    {"_mlsbm_update_z", (DL_FUNC) &_mlsbm_update_z, 5},
    {"_mlsbm_update_z_single", (DL_FUNC) &_mlsbm_update_z_single, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_mlsbm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
